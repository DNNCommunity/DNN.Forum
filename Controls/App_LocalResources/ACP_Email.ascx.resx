<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plAutomatedAddress.Text" xml:space="preserve">
    <value>From Address</value>
  </data>
  <data name="plNofify.Text" xml:space="preserve">
    <value>Enable Notifications</value>
  </data>
  <data name="plNofify.Help" xml:space="preserve">
    <value>If checked, the forum supports email notifications.</value>
  </data>
  <data name="plAutomatedAddress.Help" xml:space="preserve">
    <value>The from email address used on all outgoing forum emails.</value>
  </data>
  <data name="plEmailAddressDisplayName.Help" xml:space="preserve">
    <value>The friendly display name used on outgoing emails sent from this module.</value>
  </data>
  <data name="plEmailAddressDisplayName.Text" xml:space="preserve">
    <value>Email Display Name</value>
  </data>
  <data name="plEmailQueueTask.Help" xml:space="preserve">
    <value>If checked, email notifications will be sent using a background scheduled task.&lt;br/&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt;This can only be enabled if the host has enabled the Forum's scheduled StartEmailQueuedTasks task in the core scheduler. </value>
  </data>
  <data name="plEmailQueueTask.Text" xml:space="preserve">
    <value>Enable Email Queue</value>
  </data>
  <data name="plEnableEditEmails.Help" xml:space="preserve">
    <value>If checked, users will receive email notifications when posts are edited.</value>
  </data>
  <data name="plEnableEditEmails.Text" xml:space="preserve">
    <value>Enable Edit Emails</value>
  </data>
  <data name="valEmailAddy.ErrorMessage" xml:space="preserve">
    <value>&lt;br /&gt;Must be a valid Email!</value>
  </data>
  <data name="lblTitle.Text" xml:space="preserve">
    <value>Email Settings Management</value>
  </data>
  <data name="lblUpdateDone.Text" xml:space="preserve">
    <value>Updated Successfully!</value>
  </data>
  <data name="plEnableListServer.Help" xml:space="preserve">
    <value>If checked, users will be able to post to the forums via email. This requires enabling of from address per forum as well as installation of a third party scheduled task. </value>
  </data>
  <data name="plEnableListServer.Text" xml:space="preserve">
    <value>Enable List Server</value>
  </data>
  <data name="plEnablePerForumFrom.Help" xml:space="preserve">
    <value>If checked, module administrators will be able to associate a from email address (and from name) per individual forum.</value>
  </data>
  <data name="plEnablePerForumFrom.Text" xml:space="preserve">
    <value>Enable From Address Per Forum</value>
  </data>
  <data name="plListServerFolder.Help" xml:space="preserve">
    <value>The folder emails will be downloaded to for forum post parsing. (Same requirements as List Server)</value>
  </data>
  <data name="plListServerFolder.Text" xml:space="preserve">
    <value>List Server Folder</value>
  </data>
</root>